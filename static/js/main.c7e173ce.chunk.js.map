{"version":3,"sources":["components/Pagination/Pagination.module.css","App.module.css","components/Episode/Episode.module.css","components/Characters/Characters.module.css","components/Search/Search.module.css","assets/spinner.gif","constants/index.ts","services/getCharacters.ts","services/getByName.ts","services/getBySpecies.ts","services/getEpisode.ts","components/Episode/index.tsx","components/CharacterCard/index.tsx","components/Search/index.tsx","components/Pagination/index.tsx","components/Characters/index.tsx","components/Home/index.tsx","App.tsx","serviceWorker.ts","index.tsx","components/CharacterCard/CharacterCard.module.css"],"names":["module","exports","API_URL","fetchCharacters","a","page","fetch","response","json","getByName","name","fetchOneCharacter","type","getEpisode","url","Episode","useState","setName","episodeNumber","setEpisodeNumber","fetching","setFetching","error","setError","useEffect","episodeURL","data","episode","fetchEpisodeData","className","styles","wrapper","CharacterCard","fetchBySpecies","setEpisodeURL","clearEpisode","useCallback","src","image","alt","species","title","onClick","episode_wrapper","map","onMouseEnter","onMouseLeave","match","Search","handleCharacterSearch","fetchData","value","currentValue","setCurrentValue","onReset","event","preventDefault","onChange","e","target","onSubmit","console","log","htmlFor","data-testid","id","aria-label","Pagination","pageCount","currentPage","goToPage","pagination","prev_next","pages","cx","active","Characters","characters","setCharacters","setPageCount","setCurrentPage","handleResponse","results","info","selected","getCharacters","window","scrollTo","top","behavior","fetchCharacter","getBySpecies","changePage","pageNumber","spinner","characters_wrapper","character","i","key","App","basename","navbar","to","path","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c7e173ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__2plzt\",\"pages\":\"Pagination_pages__2TgFR\",\"prev_next\":\"Pagination_prev_next__16CWJ\",\"active\":\"Pagination_active__1R0gI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"navbar\":\"App_navbar__3gDlA\",\"navbar_item\":\"App_navbar_item__Oznmz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Episode_wrapper__1eQKe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"characters_wrapper\":\"Characters_characters_wrapper__1wku3\",\"spinner\":\"Characters_spinner__1yJwU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Search_wrapper__1ATBJ\"};","module.exports = __webpack_public_path__ + \"static/media/spinner.df87091a.gif\";","export const API_URL = 'https://rickandmortyapi.com/api';\n","import { API_URL } from '../constants';\n\n\nexport default async function fetchCharacters(page = 1) {\n  const response = await fetch(`${API_URL}/character/?page=${page}`);\n  return response.json();\n}\n","import { API_URL } from '../constants';\n\nexport default async function getByName(name: string) {\n  const response = await fetch(`${API_URL}/character/?name=${name}`);\n  return response.json();\n}\n","import { API_URL } from '../constants';\n\nexport default async function fetchOneCharacter(type: string) {\n  const response = await fetch(`${API_URL}/character/?species=${type}`);\n  return response.json();\n}\n","export default async function getEpisode(url: string) {\n  const response = await fetch(url);\n  return response.json();\n}\n","import React, { useState, useEffect } from 'react';\n\nimport getEpisode from '../../services/getEpisode';\n\nimport styles from './Episode.module.css';\n\nexport default function Episode({ url }: { url: string }) {\n  const [name, setName] = useState('');\n  const [episodeNumber, setEpisodeNumber] = useState('');\n  const [fetching, setFetching] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchEpisodeData = async (episodeURL: string) => {\n      const data = await getEpisode(episodeURL);\n      if (data.error) {\n        setError(data.error);\n      } else {\n        setName(data.name);\n        setEpisodeNumber(data.episode);\n      }\n    };\n\n    fetchEpisodeData(url);\n    setFetching(false);\n  }, [url]);\n\n  if (error) {\n    return <div className={styles.wrapper}>{error}</div>;\n  }\n\n  if (fetching || name === '' || episodeNumber === '') {\n    return <div className={styles.wrapper}>Loading...</div>;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <p>\n        {name}, {episodeNumber}\n      </p>\n    </div>\n  );\n}\n","import React, { useState, useCallback } from 'react';\n\nimport styles from './CharacterCard.module.css';\nimport CharacterInt from './Character.types';\nimport Episode from '../Episode';\n\ninterface Props {\n  data: CharacterInt;\n  fetchBySpecies: (type: string) => void;\n}\n\nexport default function CharacterCard({ data, fetchBySpecies}: Props) {\n  const [episodeURL, setEpisodeURL] = useState('');\n\n  function showEpisode(url: string) {\n    setEpisodeURL(url);\n  }\n\n  const clearEpisode = useCallback(() => {\n    setEpisodeURL('');\n  }, []);\n\n  return (\n    <div className={styles.wrapper}>\n      <img src={data.image} alt={data.name} className={styles.image} />\n      <p className={styles.name}>{data.name}</p>\n      <div>\n        <div className={styles.species}>\n          <p className={styles.title}>Species:</p>\n          <p onClick={() => fetchBySpecies(data.species)}>&nbsp;{data.species}</p>\n        </div>\n        <p className={styles.title}>Episodes:</p>\n        <div className={styles.episode_wrapper}>\n          {data.episode.map((episode) => (\n            <>\n              <p\n                onMouseEnter={() => showEpisode(episode)}\n                onMouseLeave={clearEpisode}\n                className={styles.episode}\n              >\n                {episode.match(/\\d*/gm)}\n              </p>\n            </>\n          ))}\n          {episodeURL && <Episode url={episodeURL} />}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useCallback, useEffect } from 'react';\nimport styles from './Search.module.css';\n\ninterface Props {\n  handleCharacterSearch: (search: string) => void;\n  fetchData: () => void;\n  value: string;\n}\n\nexport default function Search({ handleCharacterSearch, fetchData, value }: Props) {\n  const [currentValue, setCurrentValue] = useState('');\n\n  useEffect(() => {\n    setCurrentValue(value)\n  }, [value])\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    console.log(currentValue)\n    handleCharacterSearch(currentValue);\n  };\n\n  const onReset = (event: React.FormEvent) => {\n    event.preventDefault();\n    fetchData();\n  };\n\n  const onChange = useCallback((e) => {\n    setCurrentValue(e.target.value);\n  }, []);\n\n  return (\n    <>\n      <form className={styles.wrapper} onSubmit={onSubmit} onReset={onReset}>\n        <label htmlFor=\"character\">Search a character</label>\n        <input\n          data-testid=\"input\"\n          type=\"text\"\n          id=\"character\"\n          aria-label=\"character\"\n          onChange={onChange}\n          value={currentValue}\n        />\n        <button type=\"reset\" onClick={onReset}>Reset</button>\n      </form>\n    </>\n  );\n}\n","import React from 'react';\n\nimport styles from './Pagination.module.css';\nimport cx from 'classnames';\n\ninterface Pagination {\n  pageCount: number;\n  currentPage: number;\n  goToPage: (pageNumber: number) => void;\n}\n\nexport default function Pagination({\n  pageCount,\n  currentPage,\n  goToPage,\n}: Pagination) {\n  return (\n    <div className={styles.pagination}>\n      {currentPage > 1 && (\n        <>\n          <button onClick={() => goToPage(currentPage - 1)} className={styles.prev_next}>Previous</button>\n          <button\n            onClick={() => goToPage(currentPage - 1)}\n            className={styles.pages}\n          >\n            {currentPage - 1}\n          </button>\n        </>\n      )}\n      <p className={cx(styles.pages, styles.active)}>{currentPage}</p>\n      {currentPage < pageCount && (\n        <>\n          <button\n            onClick={() => goToPage(currentPage + 1)}\n            className={styles.pages}\n          >\n            {currentPage + 1}\n          </button>\n          <button onClick={() => goToPage(currentPage + 1)} className={styles.prev_next}>Next</button>\n        </>\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect, useCallback } from 'react';\nimport getCharacters from '../../services/getCharacters';\nimport getByName from '../../services/getByName';\nimport getBySpecies from '../../services/getBySpecies';\nimport CharacterCard from '../CharacterCard';\nimport Search from '../Search';\nimport spinner from '../../assets/spinner.gif';\nimport styles from './Characters.module.css';\nimport Pagination from '../Pagination';\n\nexport default function Characters() {\n  const [characters, setCharacters] = useState([]);\n  const [pageCount, setPageCount] = useState(1);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [fetching, setFetching] = useState(true);\n  const [currentValue, setCurrentValue] = useState('');\n  const [error, setError] = useState(null);\n\n  function handleResponse(response: {\n    error: React.SetStateAction<null>;\n    results: React.SetStateAction<never[]>;\n    info: { pages: React.SetStateAction<number> };\n  }) {\n    console.log(\"response\",response)\n    if (response.error) {\n      setError(response.error);\n      setCharacters([]);\n    } else {\n      setCharacters(response.results);\n      setPageCount(response.info.pages);\n    }\n    setFetching(false);\n  }\n\n  const fetchData = useCallback(async (selected = 1) => {\n    setFetching(true);\n    setCurrentValue('');\n    setError(null);\n    setCurrentPage(selected);\n\n    console.log(selected)\n\n    const data = await getCharacters(selected);\n    handleResponse(data);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  // fetch by character name\n  const handleCharacterSearch = useCallback((name: string) => {\n\n    console.log(\"NAME\", name)\n    setFetching(true);\n    setCurrentValue(name);\n\n    const fetchCharacter = async () => {\n      const data = await getByName(name);\n      handleResponse(data);\n    };\n\n    fetchCharacter();\n  }, []);\n\n  // fetch by characters by species\n  const fetchBySpecies = (type: string) => {\n    setFetching(true);\n\n    const fetchCharacter = async () => {\n      const data = await getBySpecies(type);\n      handleResponse(data);\n    };\n\n    fetchCharacter();\n  };\n\n  function changePage(pageNumber: number) {\n    setCurrentPage(pageNumber);\n    fetchData(pageNumber);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // RENDERS\n\n  function handleError() {\n    return <div>{error}</div>;\n  }\n\n  function handleFetch() {\n    return (\n      <div className={styles.spinner}>\n        <img src={spinner} alt=\"loading\" />\n      </div>\n    );\n  }\n\n  function handleSearch() {\n    return (\n      <>\n        <Search\n          value={currentValue}\n          handleCharacterSearch={handleCharacterSearch}\n          fetchData={fetchData}\n        />\n        {error && handleError()}\n        <div className={styles.characters_wrapper}>\n          {characters.map((character, i) => (\n            <CharacterCard\n              key={i}\n              data={character}\n              fetchBySpecies={fetchBySpecies}\n            />\n          ))}\n        </div>\n        <Pagination\n          currentPage={currentPage}\n          pageCount={pageCount}\n          goToPage={changePage}\n        />\n      </>\n    );\n  }\n\n  return <div>{fetching ? handleFetch() : handleSearch()}</div>;\n}\n","import React from 'react';\n\nexport default function Characters() {\n  \n  return (\n    <div>\n      <h1>Homepage</h1>\n    </div>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport styles from './App.module.css';\n\n\nimport Characters from './components/Characters';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <Router basename='/' >\n      <div>\n        <nav>\n          <ul className={styles.navbar}>\n            <li className={styles.navbar}>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li className={styles.navbar}>\n              <Link to=\"/characters\">Characters</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/characters\">\n            <Characters />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CharacterCard_wrapper__3L4Rl\",\"image\":\"CharacterCard_image__1mK5-\",\"name\":\"CharacterCard_name__1SykW\",\"species\":\"CharacterCard_species__1_it3\",\"title\":\"CharacterCard_title__vXM6N\",\"episode_wrapper\":\"CharacterCard_episode_wrapper__1uMnD\",\"episode\":\"CharacterCard_episode__SCtNq\"};"],"sourceRoot":""}