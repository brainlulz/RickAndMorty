{"version":3,"sources":["App.module.css","components/CharacterCard/CharacterCard.module.css","constants/index.ts","services/fetchCharacters.ts","components/CharacterCard/index.tsx","components/Characters/index.tsx","components/Home/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","API_URL","fetchCharacters","a","page","fetch","response","json","CharacterCard","data","className","styles","wrapper","name","Characters","useState","characters","setCharacters","useEffect","console","log","results","fetchData","length","map","character","App","basename","navbar","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,OAAS,oBAAoB,YAAc,2B,mBCApFD,EAAOC,QAAU,CAAC,QAAU,iC,4MCDfC,EAAU,kCCER,SAAeC,IAA9B,+B,4CAAe,0CAAAC,EAAA,6DAA+BC,EAA/B,+BAAsC,EAAtC,SACUC,MAAM,GAAD,OAAIJ,EAAJ,4BAA+BG,IAD9C,cACPE,EADO,yBAENA,EAASC,QAFH,4C,2CCOA,SAASC,EAAT,GAAyC,IAAhBC,EAAe,EAAfA,KACtC,OACE,yBAAKC,UAAWC,IAAOC,SACpBH,EAAKI,MCRG,SAASC,IAAc,IAAD,EACCC,mBAAS,IADV,mBAC5BC,EAD4B,KAChBC,EADgB,KAWnC,OATAC,qBAAU,YACO,uCAAG,4BAAAf,EAAA,sEACGD,IADH,OACVO,EADU,OAEhBU,QAAQC,IAAIX,EAAKY,SACjBJ,EAAcR,EAAKY,SAHH,2CAAH,qDAKfC,KACC,IAECN,EAAWO,OAAS,EACf,kDAGP,6BACGP,EAAWQ,KAAI,SAACC,GAAD,OACd,kBAACjB,EAAD,CAAeC,KAAMgB,QCnBd,SAASX,IAEtB,OACE,6BACE,yCCgCSY,MA9Bf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAS,KACf,6BACE,6BACE,wBAAIjB,UAAWC,IAAOiB,QACpB,wBAAIlB,UAAWC,IAAOiB,QACpB,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,wBAAInB,UAAWC,IAAOiB,QACpB,kBAAC,IAAD,CAAMC,GAAG,eAAT,iBAON,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,eACV,kBAAChB,EAAD,OAEF,kBAAC,IAAD,CAAOgB,KAAK,KACV,kBAAC,EAAD,WClBQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.0aa60fa8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"navbar\":\"App_navbar__3gDlA\",\"navbar_item\":\"App_navbar_item__Oznmz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CharacterCard_wrapper__3L4Rl\"};","export const API_URL = 'https://rickandmortyapi.com/api';\n","import { API_URL } from '../constants';\n\nexport default async function fetchCharacters(page = 1) {\n  const response = await fetch(`${API_URL}/character/?page=${page}`);\n  return response.json();\n}\n","import React from 'react';\n\nimport styles from './CharacterCard.module.css';\nimport CharacterInt from '../../interfaces/Character';\n\ninterface Props {\n  data: CharacterInt;\n}\n\nexport default function CharacterCard({ data }: Props) {\n  return (\n    <div className={styles.wrapper}>\n      {data.name}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport fetchCharacters from '../../services/fetchCharacters';\nimport CharacterCard from '../CharacterCard';\n\nexport default function Characters() {\n  const [characters, setCharacters] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await fetchCharacters();\n      console.log(data.results);\n      setCharacters(data.results);\n    };\n    fetchData();\n  }, []);\n\n  if (characters.length < 1) {\n    return <h1>Loading Characters</h1>;\n  }\n  return (\n    <div>\n      {characters.map((character) => (\n        <CharacterCard data={character} />\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Characters() {\n  \n  return (\n    <div>\n      <h1>Homepage</h1>\n    </div>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport styles from './App.module.css';\n\n\nimport Characters from './components/Characters';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <Router basename='/' >\n      <div>\n        <nav>\n          <ul className={styles.navbar}>\n            <li className={styles.navbar}>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li className={styles.navbar}>\n              <Link to=\"/characters\">Characters</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/characters\">\n            <Characters />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}